<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc
       http://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <context:component-scan base-package="com.thinkwin.web.controller,com.thinkwin.web.service,com.thinkwin.web.mobile.controller,com.thinkwin.web.terminalController"/>

    <!--开发发票提醒短信和邮件相关设置-->
    <context:property-placeholder location="classpath:order-invoice.properties"/>

    <mvc:annotation-driven conversion-service="conversionService"/>

    <mvc:default-servlet-handler />

    <mvc:interceptors>
        <mvc:interceptor>
            <mvc:mapping path="/**" />
            <mvc:exclude-mapping path="/static/**" />
            <bean id="tenantContextCleanInterceptor" class="com.thinkwin.web.security.TenantContextCleanInterceptor"/>
        </mvc:interceptor>
    </mvc:interceptors>


    <!-- 自定义的转换器的服务 -->
    <bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
        <!-- 自定义的转换器的集合 -->
        <property name="converters">
            <set>
                <!-- 日期类型转换器 -->
                <bean class="com.thinkwin.mailsender.utils.converter.DateConverter"/>
                <!-- 其他类型转换器 -->

            </set>
        </property>
    </bean>

    <!-- 配置ViewResolver。 可以用多个ViewResolver。 使用order属性排序。 InternalResourceViewResolver放在最后。 -->
    <bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
        <property name="order" value="1"/>
        <property name="defaultViews">
            <list>
                <!-- JSON View -->
                <bean class="org.springframework.web.servlet.view.json.MappingJackson2JsonView">
                    <property name="objectMapper">
                        <bean class="com.thinkwin.web.view.CustomJacksonObjectMapper">
                        </bean>
                    </property>
                </bean>
            </list>
        </property>
        <!--<property name="ignoreAcceptHeader" value="true" />-->
    </bean>

    <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>
    </bean>

    <!-- 配置全局异常处理器 -->
<!--
        <bean class="com.thinkwin.web.exception.GlobalItemsExceptionResolver"/>
    -->

    <!-- 配置文件上传组件 -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="defaultEncoding" value="utf-8"/>
        <property name="maxUploadSize" value="-1"/>
        <property name="uploadTempDir" value="/WEB-INF/temp"/>
    </bean>


    <!-- LocaleResolver 是指用什么策略来检测请求是哪一种Local
        存储区域设置信息4种方式
      SessionLocaleResolver和CookieLocaleResolver的区别，
      通过 Session只能对当前的会话有效，Cookie则对Cookie有效期内的会话都有效。
      在使用Cookie的时候，需要设置Cookie的过期时间， 否则关闭浏览器之后，
      Cookie即失效了，没有达到目的。当然，也可以保存用户的语言设置信息到数据库，
      用户登录之后即可将语言改变成用户设置的语言。-->
    <!--第一种 基于Session的本地化解析器-->
    <bean id="localeResolver"
          class="org.springframework.web.servlet.i18n.SessionLocaleResolver" />

    <!-- 第二种 基于Cookie的本地化解析器 -->
    <!--<bean id="localeResolver" class="org.springframework.web.servlet.i18n.CookieLocaleResolver">
        <property name="cookieMaxAge" value="604800"/>
        <property name="defaultLocale" value="zh_CN"/>
        <property name="cookieName" value="Language"></property>
    </bean>-->

    <!-- 国际化资源文件 -->
    <bean id="messageSource"
          class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
        <!-- 定义消息资源文件的相对路径 -->
        <property name="basename" value="classpath:messages" />
        <!-- 如果在国际化资源文件中找不到对应代码的信息，就用这个代码作为名称  -->
        <property name="useCodeAsDefaultMessage" value="true" />
    </bean>

    <!--LocaleChangeInterceptor 拦截器将检查传入的请求-->
    <mvc:interceptors>
        <bean id="localeChangeInterceptor"
              class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor">
            <property name="paramName" value="lang" />
        </bean>
    </mvc:interceptors>

    <!--===================日志切面==================-->
    <!-- 使用xml配置aop -->
    <!-- 强制使用cglib代理，如果不设置，将默认使用jdk的代理，但是jdk的代理是基于接口的 -->
    <!--<aop:config proxy-target-class="true" />

    <bean id="systemLogAspect" class="com.thinkwin.web.annotation.SystemLogAspect"></bean>

    <aop:config>
        &lt;!&ndash; 定义切面 &ndash;&gt;
        <aop:aspect id="logAspect" ref="systemLogAspect" >
            &lt;!&ndash; 定义连接点 &ndash;&gt;
            <aop:pointcut id="pointCutController" expression="execution(* com.thinkwin.web.controller..*.*(..))" />
            &lt;!&ndash; 定义方法执行后返回一个结果后执行 &ndash;&gt;
            <aop:after-returning method="afterReturn" pointcut-ref="pointCutController" />
            &lt;!&ndash; 定义Target处理后异常增强 &ndash;&gt;
            <aop:after-throwing method="doAfterThrowing" pointcut-ref="pointCutController" throwing="e"/>
        </aop:aspect>
    </aop:config>-->
</beans>
