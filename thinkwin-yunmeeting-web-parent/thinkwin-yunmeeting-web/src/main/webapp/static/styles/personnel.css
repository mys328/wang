@charset "UTF-8";
/** 
 * 项目自身变量
 */
[data-toggle="personnel"] {
  position: relative;
}

[data-toggle="personnel"].single .tags span:last-child {
  display: none;
}

[data-toggle="personnel"].single .tags span:first-child {
  display: inline-block;
}

[data-toggle="personnel"].most span.btn-add {
  display: none;
}

.personnel {
  position: absolute;
  top: 100%;
  left: 0;
  width: 480px;
  height: 400px;
  background-color: #fff;
  border-radius: 4px;
  box-shadow: 0 2px 8px 0 rgba(0, 0, 0, 0.2);
  z-index: 2;
}

.personnel .search {
  padding: 16px 16px 0;
  position: relative;
}

.personnel .search .btn-cancel-search {
  display: none;
  position: absolute;
  top: 12px;
  right: 8px;
  width: 16px;
  height: 16px;
  line-height: 16px;
  text-align: center;
  color: #d9d9d9;
  cursor: pointer;
}

.personnel .search-info {
  display: none;
}

.personnel .bread {
  height: 56px;
  line-height: 56px;
  padding: 0 24px;
  overflow: hidden;
  font-size: 14px;
}

.personnel .bread .btn-select-all {
  display: none;
  float: right;
  cursor: pointer;
  color: #1896f0;
}

.personnel .bread p {
  color: #aaa;
  margin-bottom: 0;
}

.personnel .bread p span {
  color: #1896f0;
}

.personnel .bread ol {
  float: left;
  list-style-type: none;
  padding: 0;
  margin-bottom: 0;
  color: #1896f0;
}

.personnel .bread li {
  display: none;
  font-size: 14px;
}

.personnel .bread li:before {
  content: '...';
  color: #959595;
  font-size: 10px;
}

.personnel .bread li:after {
  display: inline-block;
  width: 5px;
  height: 10px;
  content: '';
  margin: 0 6px;
  background-size: 5px 10px;
  background-image: url("../images/icon-right@2x.png");
}

.personnel .bread li:nth-last-child(4) {
  display: inline-block;
  font-size: 0;
}

.personnel .bread li:nth-last-child(1), .personnel .bread li:nth-last-child(2), .personnel .bread li:nth-last-child(3) {
  display: inline-block;
  cursor: pointer;
}

.personnel .bread li:nth-last-child(1):before, .personnel .bread li:nth-last-child(2):before, .personnel .bread li:nth-last-child(3):before {
  display: none;
}

.personnel .bread li:first-child {
  display: inline-block;
  cursor: pointer;
  font-size: 14px;
}

.personnel .bread li:first-child:before {
  display: none;
}

.personnel .bread li:last-child {
  color: #959595;
}

.personnel .bread li:last-child:after {
  display: none;
}

.personnel .list {
  margin: 0;
  padding: 0;
}

.personnel .list li {
  display: block;
  height: 36px;
  line-height: 36px;
  padding: 0 24px;
  cursor: pointer;
  font-size: 14px;
}

.personnel .list li:hover, .personnel .list li.active:hover {
  background-color: #f5f6f7;
}

.personnel .list li span.nophoto {
  margin-right: 10px;
}

.personnel .list li span {
  display: inline-block;
  vertical-align: middle;
}
.personnel .list li span.conflict {
  color: #f74555;
  font-size: 12px;
  margin-left: 12px;
}
.personnel .list li span.conflict i {
  color: #f84555;
  font-size: 12px;
  margin-right: 4px;
}
.personnel .list.groups li {
  width: 480px;
  background: transparent url("../images/icon-square@2x.png") 28px center no-repeat;
  background-size: 18px;
  padding-left: 56px;
}

.personnel .list.groups li.active {
  background-image: url("../images/icon-squared@2x.png");
}

.personnel .list.groups li.nopt {
  background: none;
  padding-left: 24px;
}

.personnel .list.groups li p {
  line-height: 36px;
  height: 36px;
  background-image: url("../images/icon-right@2x.png");
  background-position: right center;
  background-repeat: no-repeat;
  background-size: 6px 10px;
  margin-bottom: 0;
}

.personnel .list.groups li p[data-leaf="false"] {
  background: none;
}

.personnel .list.groups li .icon-friend {
  margin-right: 10px;
}

.personnel .list.persons li.active {
  background-image: url("../images/icon-checked@2x.png");
  background-position: 440px center;
  background-repeat: no-repeat;
  background-size: 6px 10px;
  background-size: 16px 12px;
}

.personnel .cont {
  height: 272px;
  overflow-y: auto;
  overflow-x: hidden;
}

.personnel .line {
  width: 432px;
  height: 1px;
  background-color: #e6e6e6;
  margin: 8px 24px;
}

.tags span {
  display: inline-block;
  height: 24px;
  line-height: 24px;
  padding: 0 10px;
  border: 1px solid #b8c4cc;
  border-radius: 12px;
  font-size: 0.875rem;
  color: #333;
  margin-bottom: 1rem;
  margin-right: .375rem;
  transition: width 0.5s;
}

.tags span.quit {
  border-color: #fa5f5f;
}

.tags span.quit i {
  color: #fa5f5f;
}

.tags span.quit:before {
  float: left;
  display: inline-block;
  content: '离职';
  color: #fa5f5f;
  font-size: 12px;
  margin-right: 4px;
}

.tags span:hover i {
  display: inline-block;
}

.tags span i {
  display: none;
  cursor: pointer;
  font-size: 8px;
  padding: 6px 0 4px 6px;
  float: right;
}
.personnel .user-url{
  width: 28px;
  height: 28px;
  margin-right: 10px;
  border-radius: 50%;
}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
