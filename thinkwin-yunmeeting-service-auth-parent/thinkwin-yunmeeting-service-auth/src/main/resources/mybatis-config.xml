<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>

    <!--指定了数据库操作相关的设置-->
    <settings>
        <!--该配置影响的所有映射器中配置的缓存的全局开关-->
        <setting name="cacheEnabled" value="true"/>
        <!--延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。
         特定关联关系中可通过设置fetchType属性来覆盖该项的开关状态-->
        <setting name="lazyLoadingEnabled" value="true"/>
        <!--是否允许单一语句返回多结果集（需要兼容驱动）。-->
        <setting name="multipleResultSetsEnabled" value="true"/>
        <!--使用列标签代替列名。不同的驱动在这方面会有不同的表现，
        具体可参考相关驱动文档或通过测试这两种不同的模式来观察所用驱动的结果。-->
        <setting name="useColumnLabel" value="true"/>
        <!--允许 JDBC 支持自动生成主键，需要驱动兼容。 如果设置为 true
        则这个设置强制使用自动生成主键，尽管一些驱动不能兼容但仍可正常工作
        （比如 Derby）。-->
        <setting name="useGeneratedKeys" value="false"/>
        <!--指定 MyBatis 应如何自动映射列到字段或属性。
        NONE 表示取消自动映射；
        PARTIAL 只会自动映射没有定义嵌套结果集映射的结果集。
        FULL 会自动映射任意复杂的结果集（无论是否嵌套）。-->
        <setting name="autoMappingBehavior" value="PARTIAL"/>
        <!--配置默认的执行器。
        SIMPLE 就是普通的执行器；
        REUSE 执行器会重用预处理语句（prepared statements）；
        BATCH 执行器将重用语句并执行批量更新。-->
        <setting name="defaultExecutorType" value="SIMPLE"/>
        <!--设置超时时间，它决定驱动等待数据库响应的秒数。-->
        <setting name="defaultStatementTimeout" value="30"/>
        <!--允许在嵌套语句中使用分页（RowBounds）。-->
        <setting name="safeRowBoundsEnabled" value="false"/>
        <!--是否开启自动驼峰命名规则（camel case）映射，
        即从经典数据库列名 A_COLUMN 到经典 Java 属性名 aColumn 的类似映射。
        解决mapper不能映射数据库带下划线的字段。-->
        <setting name="mapUnderscoreToCamelCase" value="true"/>
        <!--MyBatis 利用本地缓存机制（Local Cache）防止循环引用（circular references）和加速重复嵌套查询。
        默认值为 SESSION，这种情况下会缓存一个会话中执行的所有查询。
        若设置值为 STATEMENT，本地会话仅用在语句执行上，对相同 SqlSession 的不同调用将不会共享数据。-->
        <setting name="localCacheScope" value="SESSION"/>
        <!--当没有为参数提供特定的 JDBC 类型时，为空值指定 JDBC 类型。
        某些驱动需要指定列的 JDBC 类型，多数情况直接用一般类型即可，
        比如 NULL、VARCHAR 或 OTHER。-->
        <setting name="jdbcTypeForNull" value="OTHER"/>
        <!--指定哪个对象的方法触发一次延迟加载。-->
        <setting name="lazyLoadTriggerMethods" value="equals,clone,hashCode,toString"/>
        <!-- 打印sql语句 -->
        <setting name="logImpl" value="STDOUT_LOGGING" />
    </settings>
    <!--<plugins>
        &lt;!&ndash; com.github.pagehelper为PageHelper类所在包名 &ndash;&gt;
        <plugin interceptor="com.github.pagehelper.PageHelper">
            <property name="dialect" value="mysql"/>
            &lt;!&ndash; 该参数默认为false &ndash;&gt;
            &lt;!&ndash; 设置为true时，会将RowBounds第一个参数offset当成pageNum页码使用 &ndash;&gt;
            &lt;!&ndash; 和startPage中的pageNum效果一样&ndash;&gt;
            <property name="offsetAsPageNum" value="true"/>
            &lt;!&ndash; 该参数默认为false &ndash;&gt;
            &lt;!&ndash; 设置为true时，使用RowBounds分页会进行count查询 &ndash;&gt;
            <property name="rowBoundsWithCount" value="true"/>

            &lt;!&ndash; 设置为true时，如果pageSize=0或者RowBounds.limit = 0就会查询出全部的结果 &ndash;&gt;
            &lt;!&ndash; （相当于没有执行分页查询，但是返回结果仍然是Page类型）
            <property name="pageSizeZero" value="true"/>&ndash;&gt;

            &lt;!&ndash; 3.3.0版本可用 - 分页参数合理化，默认false禁用 &ndash;&gt;
            &lt;!&ndash; 启用合理化时，如果pageNum<1会查询第一页，如果pageNum>pages会查询最后一页 &ndash;&gt;
            &lt;!&ndash; 禁用合理化时，如果pageNum<1或pageNum>pages会返回空数据 &ndash;&gt;
            <property name="reasonable" value="true"/>
            &lt;!&ndash; 3.5.0版本可用 - 为了支持startPage(Object params)方法 &ndash;&gt;
            &lt;!&ndash; 增加了一个`params`参数来配置参数映射，用于从Map或ServletRequest中取值 &ndash;&gt;
            &lt;!&ndash; 可以配置pageNum,pageSize,count,pageSizeZero,reasonable,不配置映射的用默认值 &ndash;&gt;
            &lt;!&ndash; 不理解该含义的前提下，不要随便复制该配置
            <property name="params" value="pageNum=start;pageSize=limit;"/>    &ndash;&gt;
        </plugin>
    </plugins>-->

    <!--下面是测试类测试配置-->
    <!-- <plugins>
         &lt;!&ndash; 通用Maper &ndash;&gt;
         <plugin interceptor="com.github.abel533.mapperhelper.MapperInterceptor">
             &lt;!&ndash;================================================&ndash;&gt;
             &lt;!&ndash;可配置参数说明(一般无需修改)&ndash;&gt;
             &lt;!&ndash;================================================&ndash;&gt;
             &lt;!&ndash;UUID生成策略&ndash;&gt;
             &lt;!&ndash;配置UUID生成策略需要使用OGNL表达式&ndash;&gt;
             &lt;!&ndash;默认值32位长度:@java.util.UUID@randomUUID().toString().replace("-", "")&ndash;&gt;
             &lt;!&ndash;<property name="UUID" value="@java.util.UUID@randomUUID().toString()"/>&ndash;&gt;
             &lt;!&ndash;主键自增回写方法,默认值CALL IDENTITY(),适应于大多数数据库&ndash;&gt;
             &lt;!&ndash;<property name="IDENTITY" value="CALL IDENTITY()"/>&ndash;&gt;
             &lt;!&ndash;主键自增回写方法执行顺序,默认AFTER,可选值为(BEFORE|AFTER)&ndash;&gt;
             &lt;!&ndash;<property name="ORDER" value="AFTER"/>&ndash;&gt;

             &lt;!&ndash; 主键自增回写方法,默认值MYSQL,详细说明请看文档 &ndash;&gt;
             <property name="IDENTITY" value="MYSQL" />
             &lt;!&ndash; 通用Mapper接口，多个通用接口用逗号隔开 &ndash;&gt;
             <property name="mappers" value="com.github.abel533.mapper.Mapper" />
         </plugin>
     </plugins>

      <typeAliases>
         <package name="com.wwkj.soa.dubbo.client.model"/>
         </typeAliases>
     <environments default="development">
         <environment id="development">
             <transactionManager type="JDBC"/>
             <dataSource type="POOLED">
                 <property name="driver" value="com.mysql.jdbc.Driver" />
                 <property name="url" value="jdbc:mysql://127.0.0.1:3306/wwkjsaas" />
                 <property name="username" value="root" />
                 <property name="password" value="123456" />
             </dataSource>
         </environment>
     </environments>

     <mappers>
         <mapper class="tk.mybatis.mapper.mapper.UserMapper"/>
         <mapper class="tk.mybatis.mapper.mapper.RoleMapper"/>
     </mappers>-->

</configuration>
