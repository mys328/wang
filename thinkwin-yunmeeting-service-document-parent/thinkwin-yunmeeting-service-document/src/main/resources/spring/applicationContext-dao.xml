<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-4.2.xsd"
       default-autowire="byName">

    <!-- Druid 数据源 -->
    <bean id="yunmeeting" class="com.alibaba.druid.pool.DruidDataSource" init-method="init"
          destroy-method="close">
        <!--这一项可配可不配，如果不配置druid会根据url自动识别dbType，然后选择相应的driverClassName-->
        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <property name="url"
                  value="jdbc:mysql://${dict.jdbc.url}?useUnicode=true&amp;characterEncoding=UTF-8"/>
        <property name="username" value="${dict.jdbc.username}"/>
        <property name="password" value="${dict.jdbc.password}"/>

        <!-- 配置初始化大小、最小、最大 -->
        <!-- initialSize初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时-->
        <property name="initialSize" value="8"/>
        <!--最小连接池数量-->
        <property name="minIdle" value="1"/>
        <!--maxActive最大连接池数量-->
        <property name="maxActive" value="500"/>

        <!-- 配置获取连接等待超时的时间 配置了maxWait之后， 缺省启用公平锁，并发效率会有所下降，
            如果需要可以通过配置useUnfairLock属性为true使用非公平锁。 -->
        <property name="maxWait" value="60000"/>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000"/>
        <property name="validationQuery" value="SELECT 'x'"/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小
             在mysql5.5以下的版本中没有PSCache功能，建议关闭掉。
             5.5版本中使用PSCache，通过监控界面发现PSCache有缓存命中率记录，应该是支持PSCache。-->
        <property name="poolPreparedStatements" value="true"/>
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20"/>

        <!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计
         Druid内置提供一个StatFilter，用于统计监控信息
         StatFilter的别名是stat，这个别名映射配置信息保存在druid-xxx.jar!/META-INF/druid-filter.properties。
         stat:开启sql 监控
         wall:开启sql防火墙-->
        <property name="filters" value="stat"/>

        <!--StatFilter属性slowSqlMillis用来配置SQL慢的标准，执行时间超过slowSqlMillis的就是慢。
        slowSqlMillis的缺省值为3000，也就是3秒
        slowSqlMillis被修改为5秒，并且通过日志输出执行慢的SQL-->
        <property name="connectionProperties" value="druid.stat.slowSqlMillis=5000"/>
    </bean>

    <!-- ========================================针对myBatis的配置项============================== -->
    <!-- 配置sqlSessionFactory -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 实例化sqlSessionFactory时需要使用上述配置好的数据源以及SQL映射文件 -->
        <property name="dataSource" ref="yunmeeting"/>
        <!-- 自动扫描me/gacl/mapping/目录下的所有SQL映射的xml文件, 省掉Configuration.xml里的手工配置
        value="classpath:me/gacl/mapping/*.xml"指的是classpath(类路径)下me.gacl.mapping包中的所有xml文件
        UserMapper.xml位于me.gacl.mapping包下，这样UserMapper.xml就可以被自动扫描
         -->
       <!-- <property name="mapperLocations" value="classpath:config/mybatis/mapper/TAppUserMapper.xml"/>-->
        <!--typeAliases指定了可以给数据库表对应的类所在的包路径-->
        <property name="typeAliasesPackage" value="com.thinkwin.common.model"/>
        <property name="configLocation" value="classpath:mybatis-config.xml" />
    </bean>

    <!-- 配置扫描器 MapperScannerConfigurer指定了mapper接口所在的包路径。-->
    <bean class="tk.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 扫描me.gacl.dao这个包以及它的子包下的所有映射接口类  DAO接口所在包名，Spring会自动查找其下的类-->
        <property name="basePackage" value="com.thinkwin.dictionary.mapper"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>


        <!--此mapper为Mybatis公共mapper
            如果自定义了MyMapper1,MyMapper2，增加以下配置
            （mappers=com.xxx.xxx.MyMapper,com.xxx.xxx.MyMapper2,com.xxx.xxx.MyMapper3）

            UUID由于是执行 SQL，所以底层是使用 <selectKey> 实现的，并且因为需要先得到 UUID 的值才能插入数据库，因此还需要配置 ORDER 属性
            注意是增加 ORDER=BEFORE 这一行，如果你还有其他配置，都可以按这种方式一行一个 key=value。
            这么配置以后就可以正确的获取 UUID 的值了。
            -->
        <property name="properties">
            <value>
                mappers=tk.mybatis.mapper.common.Mapper
                ORDER=BEFORE
            </value>
        </property>
    </bean>
</beans>
